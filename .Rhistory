#print(x)
return(x)
}
insertion_sort(x_small)
insertion_sort <- function(x){
n <- length(x)
for(j in 2:n){
#print(x)
key = x[j]
i = j - 1
while(i>0 && x[i] > key){
x[i+1] = x[i]
i = i - 1
}
x[i+1] = key
}
#print(x)
#return(x)
}
insertion_sort(x_small)
a <- insertion_sort(x_small)
insertion_sort <- function(x){
n <- length(x)
for(j in 2:n){
#print(x)
key = x[j]
i = j - 1
while(i>0 && x[i] > key){
x[i+1] = x[i]
i = i - 1
}
x[i+1] = key
}
#print(x)
return(x)
}
insertion_sort(x_small)
a = Sys.time()
a = Sys.time()
insertion_sort(x_medium)
Sys.time() - a
x <- x_medium
a = Sys.time()
merge_sort(x, 1, length(x))
Sys.time() - a
a = Sys.time()
sort(x)
Sys.time() - a
sort
UseMethod("sort", x)
insertion_sort <- function(x){
n <- length(x)
for(j in 2:n){
#print(x)
key = x[j]
i = j - 1
while(i>0 && x[i] > key){
x[i+1] = x[i]
i = i - 1
}
x[i+1] = key
}
#print(x)
return(x)
}
merge_ <- function(A, p, q, r){
n1 <- q - p + 1
n2 <- r - q
L <- vector(length = n1 + 1)
R <- vector(length = n2 + 1)
for(i in 1:n1){
L[i] <- A[p+i-1]
}
for(j in 1:n2){
R[j] <- A[q+j]
}
L[n1 + 1] <- Inf
R[n2 + 1] <- Inf
i = 1
j = 1
for(k in p:r){
if(L[i] <= R[j]){
A[k] <- L[i]
i <- i + 1
}
else {
A[k] <- R[j]
j <- j + 1
}
}
#print(A)
return(A)
}
merge_sort <- function(A, p, r){
if(p < r){
q <- (p+r) %/% 2
A <- merge_sort(A, p, q)
A <- merge_sort(A, q+1, r)
merge_(A, p, q, r)
} else {
A
}
}
(1+4) %/% 2
(1+2) %/% 2
split(data.frame(x= c(1,2,34,54,435,46,234,234,1,12), y = c(1,1,1,1,2,2,2,2,2,3,3)), y)
split(data.frame(x= c(1,2,34,54,435,46,234,234,1,12), y = c(1,1,1,1,2,2,2,2,2,3)), y)
aa <- data.frame(x= c(1,2,34,54,435,46,234,234,1,12), y = c(1,1,1,1,2,2,2,2,2,3))
split(aa, y)
split(aa, aa$y)
library(stargazer)
y <- rnorm(100)
x <- rnorm(100)
y2 <- rnorm(100)
x2 <- rnorm(100)
lista <- list()
for(i in 1:10){
lista[[1]] <- data.frame(y = rnorm(100), x = rnorm(100))
}
for(i in 1:10){
lista[[i]] <- data.frame(y = rnorm(100), x = rnorm(100))
}
library(dplyr)
library(lmtest)
library(sandwich)
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = x)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))})
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = x)
})
lm(y ~ x, data = a)
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))})
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
do.call(what = 'rbind')
View(reg)
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(coef)
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))})
coef(reg[[1]])
reg[[1]]
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
data.frame(x$Estimate, x$Std. Error)
})
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
data.frame(x$Estimate, x$`Std. Error`)
})
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))})
reg[[1]]
reg[[1]]$Std. Error
reg[[1]]$`Std. Error`
reg[[1]]$`Std. Error''
reg[[1]]$'Std. Error'
reg[[1]][,1]
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
data.frame(x[,1], x[,2])
})
reg[[1]]
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
data.frame(Estimate = x[,1], Std. Error = x[,2])
})
reg <- lista %>%
lapply(function(a){
lm(y ~ x, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
data.frame(Estimate = x[,1], 'Std. Error' = x[,2])
})
reg[[1]]
lista[[i]] <- data.frame(y = rnorm(100), x1 = rnorm(100), x2 = rnorm(100))
for(i in 1:10){
lista[[i]] <- data.frame(y = rnorm(100), x1 = rnorm(100), x2 = rnorm(100))
}
lista <- list()
for(i in 1:10){
lista[[i]] <- data.frame(y = rnorm(100), x1 = rnorm(100), x2 = rnorm(100))
}
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))})
reg[[1]]
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
data.frame(Estimate = x[,1], 'Std. Error' = x[,2]) %>%
t() %>%
data.frame(rownames(.), .)
})
reg[[1]]
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
data.frame(Estimate = x[,1], 'Std. Error' = x[,2]) %>%
data.frame(rownames(.), .)
})
reg[[1]]
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
data.frame(Estimate = x[,1], 'Std. Error' = x[,2]) %>%
data.frame(rownames(.), .)
}) %>%
do.call(what = 'rbind')
View(reg)
View(reg)
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(Estimate = x[,1], 'Std. Error' = x[,2]) %>%
data.frame(rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind')
View(reg)
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(Estimate = x[,1], 'Std. Error' = x[,2]) %>%
data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind')
View(reg)
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(Estimate = x[,1], 'Std. Error' = x[,2]) %>%
data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind') %>%
group_by(variavel) %>%
summarise(mean())
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(Estimate = x[,1], 'Std. Error' = x[,2]) %>%
data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind') %>%
group_by(variavel) %>%
summarise_all(funs(mean()))
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(Estimate = x[,1], 'Std. Error' = x[,2]) %>%
data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind') %>%
group_by(variavel) %>%
summarise_all(funs(mean))
View(reg)
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind') %>%
group_by(variavel) %>%
summarise_all(funs(mean))
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind') %>%
group_by(variavel) %>%
summarise_all(funs(mean))
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))})
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
})
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))})
jorge <- reg[[1]] %>% as.data.frame()
jorge <- reg[[1]] %>% coef()
jorge <- reg[[1]]
jorge <- reg[1]
jorge <- reg[1] %>% as.data.frame()
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(Estimate = x[,1], 'Std. Error' = x[,2]) %>%
data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind') %>%
group_by(variavel) %>%
summarise_all(funs(mean))
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))})
reg[[1]]
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(Estimate = x[,1], 'Std. Error' = x[,2], 't value' =  x[,3], 'Pr(>|t|)'= x[,4]) %>%
data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind') %>%
group_by(variavel) %>%
summarise_all(funs(mean))
View(reg)
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(Estimate = x[,1], 'Std. Error' = x[,2], 't value' =  x[,3], 'Pr\(>|t|\)'= x[,4]) %>%
data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind') %>%
group_by(variavel) %>%
summarise_all(funs(mean))
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(Estimate = x[,1], 'Std. Error' = x[,2], 't value' =  x[,3], 'P.valor'= x[,4]) %>%
data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind') %>%
group_by(variavel) %>%
summarise_all(funs(mean))
View(reg)
reg <- lista %>%
lapply(function(a){
lm(y ~ x1 + x2, data = a)
}) %>%
lapply(function(x){coeftest(x, vcov=NeweyWest(x))}) %>%
lapply(function(x){
a <- data.frame(Estimate = x[,1], 'Std. Error' = x[,2], 't value' =  x[,3], 'p.value'= x[,4]) %>%
data.frame(variavel=rownames(.), .)
rownames(a) <- c()
return(a)
}) %>%
do.call(what = 'rbind') %>%
group_by(variavel) %>%
summarise_all(funs(mean))
View(reg)
library(readxl)
files <- list.files(path = "res",pattern = ".rds")
setwd("C:\\Users\\tadeu\\Desktop\\FGV\\code\\anthony")
library(Rcrawler)
library(dplyr)
library(parallel)
library(xlsx)
detectCores()
files <- list.files(path = "res",pattern = ".rds")
substring(files[1], 3)
substring(files[1], 4)
substring(files[1], 5)
substring(files[1], 6)
substring(files[1], 6, 10)
substring(files[1], 6, 11)
substring(files[1], 6, 12)
substring(files[1], 6, 13)
substring(files[1], 6, 14)
substring(files[1], 6, 13)
substring(files[1], 6, 12)
substring(files, 6, 12)
substring(files, 6, 12) %>% as.numeric()
interval <- 3000000:7821405
completed <- substring(files, 6, 12) %>% as.numeric()
new_interval <- interval[!completed]
interval %in% completed
new_interval <- interval[!(interval %in% completed)]
files <- list.files(path = "res",pattern = ".rds")
completed <- substring(files, 6, 12) %>% as.numeric()
interval <- 4000001:7821405
new_interval <- interval[!(interval %in% completed)]
scrape_rds <- function(index){
url_list_element <- sprintf("https://www.infomoney.com.br/mercados/noticia/%s", index)
for(i in 1:10){
try({
pag1 <- read_html(url_list_element)
date <- pag1 %>%
html_node(".article__date") %>%
html_text()
title <- pag1 %>%
html_node(".article__title") %>%
html_text()
res <- list(index = index, date = date, title = title)
saveRDS(res, sprintf("res//page_%s.rds", index))
break
}, silent = F)
Sys.sleep(2)
}
}
cl <- makeCluster(detectCores())
clusterEvalQ(cl, { library(rvest) })  # you need to export packages as well
parLapply(cl, new_interval, scrape_rds)
stopCluster(cl)
